/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.EmpleadoDAO;
import java.awt.event.KeyEvent;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import model.LoginSystem;
import model.SoundManager;

public class AdministrarEmpleados extends javax.swing.JFrame {

    /**
     * Creates new form AdministrarEmpleados
     */
    public static void limpiarTabla(DefaultTableModel modelo) {
        modelo.setRowCount(0);
    }

    public void limpiarFiltros() {
        jFormattedTextFieldRut.setText("");
        jTextFieldNombre.setText("");
        jTextFieldUsername.setText("");
        jPasswordFieldPassword.setText("");
        
        jCheckBoxHabilitado.setSelected(false);
        jCheckBoxCaja.setSelected(false);
        jCheckBoxBodega.setSelected(false);
        jCheckBoxReportes.setSelected(false);
        jCheckBoxAdministrarEmpleados.setSelected(false);
    }

    public void actualizarEstadoFiltros() {
        // Deshabilitar todos los campos por defecto
        Map<JComponent, Boolean> fields = new HashMap<>();
        fields.put(jFormattedTextFieldRut, false);
        fields.put(jTextFieldNombre, false);
        fields.put(jTextFieldUsername, false);

        int index = jComboBoxFiltrarPor.getSelectedIndex();

        switch (index) {
            case 0:
                fields.put(jFormattedTextFieldRut, true);
                jFormattedTextFieldRut.requestFocus();
                jFormattedTextFieldRut.setText("");
                break;
            case 1:
                fields.put(jTextFieldNombre, true);
                jTextFieldNombre.requestFocus();
                jTextFieldNombre.setText("");
                break;
            case 2:
                fields.put(jTextFieldUsername, true);
                jTextFieldUsername.requestFocus();
                jTextFieldUsername.setText("");
                break;

        }
        for (Map.Entry<JComponent, Boolean> entry : fields.entrySet()) {
            entry.getKey().setEnabled(entry.getValue());
        }
    }

    ;

    public AdministrarEmpleados() {
        initComponents();
        setLocationRelativeTo(null);

        jToggleButtonActualizar.setEnabled(false);
        jButtonEliminar.setEnabled(false);
        jButtonLimpiar.setEnabled(false);
        jPasswordFieldPassword.setEnabled(false);
        actualizarEstadoFiltros();
        jButtonEliminar.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonVolver = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableSalida = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButtonAgregar = new javax.swing.JButton();
        jButtonBuscar = new javax.swing.JButton();
        jToggleButtonActualizar = new javax.swing.JToggleButton();
        jButtonLimpiar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jCheckBoxHabilitado = new javax.swing.JCheckBox();
        jCheckBoxAdministrarEmpleados = new javax.swing.JCheckBox();
        jCheckBoxReportes = new javax.swing.JCheckBox();
        jCheckBoxCaja = new javax.swing.JCheckBox();
        jCheckBoxBodega = new javax.swing.JCheckBox();
        jLabelAccesoA = new javax.swing.JLabel();
        jComboBoxFiltrarPor = new javax.swing.JComboBox<>();
        jLabelFiltrarPor = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jFormattedTextFieldRut = new javax.swing.JFormattedTextField();
        jLabelRut = new javax.swing.JLabel();
        jLabelNombre = new javax.swing.JLabel();
        jTextFieldNombre = new javax.swing.JTextField();
        jLabelUsername = new javax.swing.JLabel();
        jTextFieldUsername = new javax.swing.JTextField();
        jLabelPassword = new javax.swing.JLabel();
        jPasswordFieldPassword = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Administrar Empleados");
        setName("AdministrarEmpleados"); // NOI18N

        jButtonVolver.setText("Volver");
        jButtonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVolverActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/logo-mini.png"))); // NOI18N

        jTableSalida.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "RUT", "Nombre Completo", "Username", "Acceso Administrador", "Acceso Reportes", "Acceso Caja", "Acceso Bodega", "Esta Habilitado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableSalida.getTableHeader().setReorderingAllowed(false);
        jTableSalida.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTableSalidaFocusGained(evt);
            }
        });
        jTableSalida.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableSalidaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableSalida);

        jButtonAgregar.setText("Agregar");
        jButtonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarActionPerformed(evt);
            }
        });

        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        jToggleButtonActualizar.setText("Actualizar");
        jToggleButtonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonActualizarActionPerformed(evt);
            }
        });

        jButtonLimpiar.setText("Limpiar");
        jButtonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimpiarActionPerformed(evt);
            }
        });

        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(jButtonAgregar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToggleButtonActualizar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonEliminar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonLimpiar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23))
        );

        jCheckBoxHabilitado.setText("Habilitado");
        jCheckBoxHabilitado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxHabilitadoActionPerformed(evt);
            }
        });

        jCheckBoxAdministrarEmpleados.setText("Admin Empleados");

        jCheckBoxReportes.setText("Reportes");
        jCheckBoxReportes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxReportesActionPerformed(evt);
            }
        });

        jCheckBoxCaja.setText("Caja");

        jCheckBoxBodega.setText("Bodega");

        jLabelAccesoA.setText("Tiene acceso a:");

        jComboBoxFiltrarPor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RUT", "Nombre", "Username" }));
        jComboBoxFiltrarPor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFiltrarPorActionPerformed(evt);
            }
        });

        jLabelFiltrarPor.setText("Filtrar por");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxFiltrarPor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxHabilitado)
                            .addComponent(jCheckBoxAdministrarEmpleados)
                            .addComponent(jCheckBoxReportes)
                            .addComponent(jCheckBoxCaja)
                            .addComponent(jCheckBoxBodega)
                            .addComponent(jLabelAccesoA))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabelFiltrarPor)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelFiltrarPor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxFiltrarPor, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jCheckBoxHabilitado)
                .addGap(18, 18, 18)
                .addComponent(jLabelAccesoA)
                .addGap(7, 7, 7)
                .addComponent(jCheckBoxCaja)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxBodega)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxReportes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxAdministrarEmpleados)
                .addGap(16, 16, 16))
        );

        try {
            jFormattedTextFieldRut.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#-#")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFormattedTextFieldRut.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFormattedTextFieldRutKeyTyped(evt);
            }
        });

        jLabelRut.setText("RUT");

        jLabelNombre.setText("Nombre");

        jLabelUsername.setText("Username");

        jLabelPassword.setText("Contraseña");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPasswordFieldPassword)
                    .addComponent(jTextFieldUsername, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextFieldNombre, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jFormattedTextFieldRut)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelRut)
                            .addComponent(jLabelNombre)
                            .addComponent(jLabelUsername)
                            .addComponent(jLabelPassword))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabelRut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFormattedTextFieldRut, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelNombre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelUsername)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPasswordFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonVolver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVolverActionPerformed
        Hub hubWindow = new Hub();
        hubWindow.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButtonVolverActionPerformed

    private void jCheckBoxHabilitadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxHabilitadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxHabilitadoActionPerformed

    private void jCheckBoxReportesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxReportesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxReportesActionPerformed

    private void jToggleButtonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonActualizarActionPerformed
        jToggleButtonActualizar.setEnabled(false);
        jButtonEliminar.setEnabled(false);

        String nombreCompleto = jTextFieldNombre.getText();
        String[] nombreSeparado = nombreCompleto.split(" ");
        String password = EmpleadoDAO.getPassword(jTextFieldUsername.getText()); //Contraseña de la base de datos

        if (jPasswordFieldPassword.getPassword().length > 0) {
            password = LoginSystem.hashString(new String(jPasswordFieldPassword.getPassword()));

        }

        EmpleadoDAO.actualizarEmpleado(
                jFormattedTextFieldRut.getText(),
                nombreSeparado[0],
                nombreSeparado[1],
                nombreSeparado[2],
                nombreSeparado[3],
                jTextFieldUsername.getText(),
                password,
                jCheckBoxAdministrarEmpleados.isSelected(),
                jCheckBoxReportes.isSelected(),
                jCheckBoxCaja.isSelected(),
                jCheckBoxBodega.isSelected(),
                jCheckBoxHabilitado.isSelected());

    }//GEN-LAST:event_jToggleButtonActualizarActionPerformed

    private void jComboBoxFiltrarPorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFiltrarPorActionPerformed
        actualizarEstadoFiltros();

    }//GEN-LAST:event_jComboBoxFiltrarPorActionPerformed

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        int index = jComboBoxFiltrarPor.getSelectedIndex();

        String valorBusqueda = ""; // Variable para almacenar el valor de búsqueda

        switch (index) {
            case 0:
                // RUT
                valorBusqueda = jFormattedTextFieldRut.getText();
                break;
            case 1:
                // NOMBRE
                valorBusqueda = jTextFieldNombre.getText();
                break;
            case 2:
                // USERNAME
                valorBusqueda = jTextFieldUsername.getText();
                break;
            // default:
            //   JOptionPane.showMessageDialog(null, "Seleccione un criterio de búsqueda válido", "Error", JOptionPane.ERROR_MESSAGE);
            // break; // Salir si no se ha seleccionado un filtro válido
        }

        // Llamamos al método y obtenemos las filas
        List<String[]> filas = EmpleadoDAO.obtenerFilasEmpleadoPorCampo(campoBusqueda(index), valorBusqueda);

        if (valorBusqueda == null || valorBusqueda.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar un valor de búsqueda.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else if (filas.isEmpty()) {
           // JOptionPane.showMessageDialog(null, "No se encontraron empleados con los valores especificados", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Mostramos los resultados en el JTable
            mostrarResultados(filas);
            jButtonLimpiar.setEnabled(true);
        }
    }

// Método para obtener el nombre del campo según el índice seleccionado
    private String campoBusqueda(int index) {
        switch (index) {
            case 0:
                return "rut";
            case 1:
                return "primerNombre";
            case 2:
                return "username";
            default:
                return ""; // En caso de un índice inesperado
        }
    }

// Método para mostrar los resultados en el JTable
    private void mostrarResultados(List<String[]> filas) {
        // Definir las columnas de la tabla
        String[] columnas = {"RUT", "Nombre Completo", "Username", "Acceso Administrar Empleados", "Acceso Reportes", "Acceso Caja", "Acceso Bodega", "Está Habilitado"};

        // Crear el modelo de la tabla y asignárselo al JTable
        DefaultTableModel modelo = new DefaultTableModel(null, columnas);
        jTableSalida.setModel(modelo);

        // Llenar el modelo con los datos obtenidos
        for (String[] fila : filas) {
            // Suponiendo que el orden de las columnas en 'fila' es:
            // [0] RUT, [1] Primer Nombre, [2] Segundo Nombre, [3] Apellido Paterno, 
            // [4] Apellido Materno, [5] Username, [6] Password, [7] Acceso Admin, 
            // [8] Acceso Reportes, [9] Acceso Caja, [10] Acceso Bodega, [11] Habilitado

            // Concatenamos los nombres en una sola cadena: "Primer Nombre Segundo Nombre Apellido Paterno Apellido Materno"
            String nombreCompleto = fila[1] + " " + fila[2] + " " + fila[3] + " " + fila[4];

            // Creamos un array con la información que queremos mostrar en la tabla
            String[] filaTabla = {
                fila[0], // RUT
                nombreCompleto, // Nombre Completo
                fila[5], // Username
                fila[7], // Acceso Administrar Empleados
                fila[8], // Acceso Reportes
                fila[9], // Acceso Caja
                fila[10], // Acceso Bodega
                fila[11] // Está Habilitado
            };

            // Agregamos la fila al modelo
            modelo.addRow(filaTabla);
        }


    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jTableSalidaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSalidaMouseClicked

    }//GEN-LAST:event_jTableSalidaMouseClicked

    private void jTableSalidaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTableSalidaFocusGained
        try {
            // Obtener la fila seleccionada
            int selectedRow = jTableSalida.getSelectedRow();

            // Si no hay fila seleccionada, salir del método
            if (selectedRow == -1) {
                return;
            }

            // Convertir el índice de fila del view al modelo en caso de que la tabla esté ordenada
            int modelRow = jTableSalida.convertRowIndexToModel(selectedRow);

            // Actualizar checkboxes usando un método separado
            updateCheckBoxesFromTableRow(modelRow);

        } catch (Exception e) {
            // Loggear el error y mostrar mensaje al usuario
            System.out.println("Error al procesar la fila seleccionada: " + e.getMessage());
            JOptionPane.showMessageDialog(
                    this,
                    "Error al procesar la fila seleccionada: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_jTableSalidaFocusGained

    private void jButtonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimpiarActionPerformed
        limpiarFiltros();
        DefaultTableModel modelo = (DefaultTableModel) jTableSalida.getModel();
        limpiarTabla(modelo);
        actualizarEstadoFiltros();
        jButtonLimpiar.setEnabled(false);
        jPasswordFieldPassword.setEnabled(false);
        jButtonEliminar.setEnabled(true);
        jToggleButtonActualizar.setEnabled(true);
        SoundManager.reproducirSonido("clean");

    }//GEN-LAST:event_jButtonLimpiarActionPerformed
    int contador = 0;

    private void jButtonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarActionPerformed
        if (contador == 0) {
            // Mostrar confirmación inicial
            int opcion = JOptionPane.showConfirmDialog(null,
                    "¿Seguro que deseas agregar un empleado?",
                    "Confirmación",
                    JOptionPane.YES_NO_OPTION);
            if (opcion == JOptionPane.NO_OPTION || opcion == JOptionPane.CLOSED_OPTION) {
                return;
            }

            contador++;
            jTableSalida.setEnabled(false);
            limpiarFiltros();
            jButtonBuscar.setEnabled(false);
            jComboBoxFiltrarPor.setEnabled(false);
            jTextFieldNombre.setEnabled(true);
            jTextFieldUsername.setEnabled(true);
            jPasswordFieldPassword.setEnabled(true);

            JOptionPane.showMessageDialog(null,
                    "Ingresa los datos del empleado a agregar\n y presiona nuevamente el botón",
                    "Info",
                    JOptionPane.INFORMATION_MESSAGE);

            jFormattedTextFieldRut.requestFocus();

        } else if (contador == 1) {
            // Recolectar los datos ingresados
            String rut = jFormattedTextFieldRut.getText().trim();
            String nombreCompleto = jTextFieldNombre.getText().trim();
            String username = jTextFieldUsername.getText().trim();
            String password = LoginSystem.hashString(new String(jPasswordFieldPassword.getPassword()));
            boolean isAdmin = jCheckBoxAdministrarEmpleados.isSelected();
            boolean isCaja = jCheckBoxCaja.isSelected();
            boolean isBodega = jCheckBoxBodega.isSelected();
            boolean isReporte = jCheckBoxReportes.isSelected();
            boolean isHabilitado = jCheckBoxHabilitado.isSelected();

            // Validar campos obligatorios
            if (rut.isEmpty() || nombreCompleto.isEmpty() || username.isEmpty() || password.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Por favor, completa todos los campos obligatorios.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }

            String[] nombre = nombreCompleto.split(" ");
       
            // Llamar al DAO para insertar los datos
            boolean exito = EmpleadoDAO.agregarEmpleado(rut, nombre[0], nombre[1], nombre[2], nombre[3], username, password, isAdmin, isReporte, isCaja, isBodega, isHabilitado);

            if (exito) {
                limpiarFiltros();
                actualizarEstadoFiltros();
                jPasswordFieldPassword.setEnabled(false);
                jComboBoxFiltrarPor.setEnabled(true);
                jButtonBuscar.setEnabled(true);
                jTableSalida.setEnabled(true);
                contador--;
            }
        }
    }//GEN-LAST:event_jButtonAgregarActionPerformed

    private void jFormattedTextFieldRutKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextFieldRutKeyTyped

    }//GEN-LAST:event_jFormattedTextFieldRutKeyTyped

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        String rut = jFormattedTextFieldRut.getText().trim();

        if (rut.isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Por favor, ingresa el RUT del empleado que deseas eliminar.",
                    "Advertencia",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        int opcion = JOptionPane.showConfirmDialog(null,
                "¿Seguro que deseas eliminar al empleado con RUT " + rut + "?",
                "Confirmación",
                JOptionPane.YES_NO_OPTION);

        if (opcion == JOptionPane.YES_OPTION) {
            boolean exito = EmpleadoDAO.eliminarEmpleado(rut);

            if (exito) {
                limpiarFiltros();
                actualizarEstadoFiltros();
                jPasswordFieldPassword.setEnabled(false);
                jToggleButtonActualizar.setEnabled(false);
                jButtonEliminar.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void updateCheckBoxesFromTableRow(int modelRow) {
        // Definir las columnas como constantes para mejor mantenimiento
        final int RUT_COLUMN = 0;
        final int FULLNAME = 1;
        final int USERNAME = 2;
        final int ADMIN_COLUMN = 3;
        final int REPORTS_COLUMN = 4;
        final int CASHIER_COLUMN = 5;
        final int WAREHOUSE_COLUMN = 6;
        final int ENABLED_COLUMN = 7;

        // Obtener los valores usando un método auxiliar que maneja valores nulos
        String rut = getStringValueFromCell(modelRow, RUT_COLUMN);
        String fullname = getStringValueFromCell(modelRow, FULLNAME);
        String username = getStringValueFromCell(modelRow, USERNAME);
        boolean adminAccess = getBooleanValueFromCell(modelRow, ADMIN_COLUMN);
        boolean reportsAccess = getBooleanValueFromCell(modelRow, REPORTS_COLUMN);
        boolean cashierAccess = getBooleanValueFromCell(modelRow, CASHIER_COLUMN);
        boolean warehouseAccess = getBooleanValueFromCell(modelRow, WAREHOUSE_COLUMN);
        boolean isEnabled = getBooleanValueFromCell(modelRow, ENABLED_COLUMN);

        // Actualizar los checkboxes
        SwingUtilities.invokeLater(() -> {
            jFormattedTextFieldRut.setText(rut);
            jTextFieldNombre.setText(fullname);
            jTextFieldUsername.setText(username);
            jCheckBoxAdministrarEmpleados.setSelected(adminAccess);
            jCheckBoxReportes.setSelected(reportsAccess);
            jCheckBoxCaja.setSelected(cashierAccess);
            jCheckBoxBodega.setSelected(warehouseAccess);
            jCheckBoxHabilitado.setSelected(isEnabled);

            jFormattedTextFieldRut.setEnabled(true);
            jTextFieldNombre.setEnabled(true);
            jTextFieldUsername.setEnabled(true);
            jToggleButtonActualizar.setEnabled(true);
            jButtonEliminar.setEnabled(true);
            jPasswordFieldPassword.setEnabled(true);

        });
    }

    private boolean getBooleanValueFromCell(int row, int column) {
        Object value = jTableSalida.getModel().getValueAt(row, column);
        if (value == null) {
            return false;
        }

        String stringValue = value.toString().trim().toLowerCase();
        return "true".equals(stringValue) || "1".equals(stringValue) || "yes".equals(stringValue);
    }

    private String getStringValueFromCell(int row, int column) {
        String stringValue = null;

        Object value = jTableSalida.getModel().getValueAt(row, column);
        if (value != null) {
            stringValue = value.toString();

        }

        return stringValue;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Bodega.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Bodega.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Bodega.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bodega.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AdministrarEmpleados().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAgregar;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonLimpiar;
    private javax.swing.JButton jButtonVolver;
    private javax.swing.JCheckBox jCheckBoxAdministrarEmpleados;
    private javax.swing.JCheckBox jCheckBoxBodega;
    private javax.swing.JCheckBox jCheckBoxCaja;
    private javax.swing.JCheckBox jCheckBoxHabilitado;
    private javax.swing.JCheckBox jCheckBoxReportes;
    private javax.swing.JComboBox<String> jComboBoxFiltrarPor;
    private javax.swing.JFormattedTextField jFormattedTextFieldRut;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelAccesoA;
    private javax.swing.JLabel jLabelFiltrarPor;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JLabel jLabelPassword;
    private javax.swing.JLabel jLabelRut;
    private javax.swing.JLabel jLabelUsername;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPasswordField jPasswordFieldPassword;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableSalida;
    private javax.swing.JTextField jTextFieldNombre;
    private javax.swing.JTextField jTextFieldUsername;
    private javax.swing.JToggleButton jToggleButtonActualizar;
    // End of variables declaration//GEN-END:variables
}
